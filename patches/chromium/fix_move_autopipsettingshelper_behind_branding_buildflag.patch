From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: deepak1556 <hop2deep@gmail.com>
Date: Wed, 30 Aug 2023 15:56:53 +0900
Subject: fix: move AutoPipSettingsHelper behind branding buildflag

The class was added in https://chromium-review.googlesource.com/c/chromium/src/+/4688277
which is primarily used for providing an overlay view in a PIP window
to support content settings UI. The support pulls in chrome content settings
and UI code which are not valid in the scope of Electron.

diff --git a/chrome/browser/picture_in_picture/picture_in_picture_window_manager.cc b/chrome/browser/picture_in_picture/picture_in_picture_window_manager.cc
index c74ff0ec2cd7c57b042dddce4e763a4cadf9072a..7f60801c4d3e4513ac5aaf27f287776134f63945 100644
--- a/chrome/browser/picture_in_picture/picture_in_picture_window_manager.cc
+++ b/chrome/browser/picture_in_picture/picture_in_picture_window_manager.cc
@@ -20,8 +20,10 @@
 #include "ui/gfx/geometry/size.h"
 #if !BUILDFLAG(IS_ANDROID)
 #include "base/task/sequenced_task_runner.h"
+#if BUILDFLAG(GOOGLE_CHROME_BRANDING)
 #include "chrome/browser/picture_in_picture/auto_picture_in_picture_tab_helper.h"
 #include "chrome/browser/picture_in_picture/auto_pip_setting_helper.h"
+#endif  // BUILDFLAG(GOOGLE_CHROME_BRANDING)
 #include "third_party/blink/public/common/features.h"
 #include "ui/views/view.h"
 #endif  // !BUILDFLAG(IS_ANDROID)
@@ -36,7 +38,7 @@ constexpr gfx::Size kMinWindowSize(240, 52);
 // not apply to video Picture-in-Picture windows.
 constexpr double kMaxWindowSizeRatio = 0.8;
 
-#if !BUILDFLAG(IS_ANDROID)
+#if !BUILDFLAG(IS_ANDROID) && BUILDFLAG(GOOGLE_CHROME_BRANDING)
 // Returns true if a document picture-in-picture window should be focused upon
 // opening it.
 bool ShouldFocusPictureInPictureWindow(const NavigateParams& params) {
@@ -168,7 +170,7 @@ bool PictureInPictureWindowManager::ExitPictureInPictureViaWindowUi(
     return false;
   }
 
-#if !BUILDFLAG(IS_ANDROID)
+#if !BUILDFLAG(IS_ANDROID) && BUILDFLAG(GOOGLE_CHROME_BRANDING)
   if (auto_pip_setting_helper_) {
     auto_pip_setting_helper_->OnUserClosedWindow();
   }
@@ -351,7 +353,7 @@ gfx::Size PictureInPictureWindowManager::GetMaximumWindowSize(
 
 // static
 void PictureInPictureWindowManager::SetWindowParams(NavigateParams& params) {
-#if !BUILDFLAG(IS_ANDROID)
+#if !BUILDFLAG(IS_ANDROID) && BUILDFLAG(GOOGLE_CHROME_BRANDING)
   // Always show document picture-in-picture in a new window. When this is
   // not opened via the AutoPictureInPictureTabHelper, focus the window.
   params.window_action = ShouldFocusPictureInPictureWindow(params)
@@ -374,7 +376,7 @@ void PictureInPictureWindowManager::CloseWindowInternal() {
   video_web_contents_observer_.reset();
   pip_window_controller_->Close(false /* should_pause_video */);
   pip_window_controller_ = nullptr;
-#if !BUILDFLAG(IS_ANDROID)
+#if !BUILDFLAG(IS_ANDROID) && BUILDFLAG(GOOGLE_CHROME_BRANDING)
   auto_pip_setting_helper_.reset();
 #endif  // !BUILDFLAG(IS_ANDROID)
 }
@@ -385,8 +387,10 @@ void PictureInPictureWindowManager::DocumentWebContentsDestroyed() {
   // contents, so we only need to forget the controller here when user closes
   // the parent web contents with the PiP window open.
   document_web_contents_observer_.reset();
+#if BUILDFLAG(GOOGLE_CHROME_BRANDING)
   // `auto_pip_setting_helper_` depends on the opener's WebContents.
   auto_pip_setting_helper_.reset();
+#endif  // BUILDFLAG(GOOGLE_CHROME_BRANDING)
   if (pip_window_controller_)
     pip_window_controller_ = nullptr;
 }
@@ -408,6 +412,7 @@ PictureInPictureWindowManager::GetOverlayView(
     return nullptr;
   }
 
+#if BUILDFLAG(GOOGLE_CHROME_BRANDING)
   // It would be nice to create this in `EnterPictureInPicture*`, but detecting
   // auto-pip while pip is in the process of opening doesn't work.
   //
@@ -438,6 +443,8 @@ PictureInPictureWindowManager::GetOverlayView(
   }
 
   return overlay_view;
+#endif  // BUILDFLAG(GOOGLE_CHROME_BRANDING)
+  return nullptr;
 }
 #endif  // !BUILDFLAG(IS_ANDROID)
 
@@ -451,7 +458,7 @@ PictureInPictureWindowManager::GetActiveSessionOrigins() {
   return active_origins;
 }
 
-#if !BUILDFLAG(IS_ANDROID)
+#if !BUILDFLAG(IS_ANDROID) && BUILDFLAG(GOOGLE_CHROME_BRANDING)
 void PictureInPictureWindowManager::CreateAutoPipSettingHelperIfNeeded() {
   // Because we have to defer creating this until after the tab helper finds out
   // about pip, we don't care if there's already a helper.  Just use it.
diff --git a/chrome/browser/picture_in_picture/picture_in_picture_window_manager.h b/chrome/browser/picture_in_picture/picture_in_picture_window_manager.h
index 64152ef42a5225e857fde6982e4d88baf0c96341..86617d4ae181337b3558b18303f305d4ce38fcbc 100644
--- a/chrome/browser/picture_in_picture/picture_in_picture_window_manager.h
+++ b/chrome/browser/picture_in_picture/picture_in_picture_window_manager.h
@@ -11,6 +11,7 @@
 #include "base/memory/singleton.h"
 #include "base/observer_list.h"
 #include "base/observer_list_types.h"
+#include "build/branding_buildflags.h"
 #include "build/build_config.h"
 #include "chrome/browser/picture_in_picture/auto_pip_setting_overlay_view.h"
 #include "third_party/abseil-cpp/absl/types/optional.h"
@@ -30,7 +31,9 @@ class Display;
 }  // namespace display
 
 #if !BUILDFLAG(IS_ANDROID)
+#if BUILDFLAG(GOOGLE_CHROME_BRANDING)
 class AutoPipSettingHelper;
+#endif
 
 namespace views {
 class View;
@@ -176,10 +179,11 @@ class PictureInPictureWindowManager {
       const gfx::Rect& browser_view_overridden_bounds,
       views::View* anchor_view,
       views::BubbleBorder::Arrow arrow);
-
+#if BUILDFLAG(GOOGLE_CHROME_BRANDING)
   AutoPipSettingHelper* get_setting_helper_for_testing() {
     return auto_pip_setting_helper_.get();
   }
+#endif
 #endif
 
   // Get the origins for initiators of active Picture-in-Picture sessions.
@@ -237,7 +241,7 @@ class PictureInPictureWindowManager {
   // helper class for callbacks, to avoid re-entrant calls during pip set-up.
   static void ExitPictureInPictureSoon();
 
-#if !BUILDFLAG(IS_ANDROID)
+#if !BUILDFLAG(IS_ANDROID) && BUILDFLAG(GOOGLE_CHROME_BRANDING)
   // Create the settings helper if this is auto-pip and we don't have one.
   void CreateAutoPipSettingHelperIfNeeded();
 #endif  // !BUILDFLAG(IS_ANDROID)
@@ -252,7 +256,9 @@ class PictureInPictureWindowManager {
 #if !BUILDFLAG(IS_ANDROID)
   std::unique_ptr<DocumentWebContentsObserver> document_web_contents_observer_;
 
+#if BUILDFLAG(GOOGLE_CHROME_BRANDING)
   std::unique_ptr<AutoPipSettingHelper> auto_pip_setting_helper_;
+#endif  // BUILDFLAG(GOOGLE_CHROME_BRANDING)
 #endif  //! BUILDFLAG(IS_ANDROID)
 
   raw_ptr<content::PictureInPictureWindowController, DanglingUntriaged>
